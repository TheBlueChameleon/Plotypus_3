#include "dataview.h"

using namespace Plotypus;

namespace Plotypus
{
    DataView::DataView(const PlotStyle plotStyleID, const std::string& label) :
        title(label)
    {
        setPlotStyleID(plotStyleID);
    }

    DataView::DataView(const std::string& plotStyle, const std::string& label) :
        title(label), plotStyle(plotStyle), plotStyleID(PlotStyle::Custom)
    {}

    DataView& DataView::reset()
    {
        plotStyleID                     = PlotStyle::Custom;
        plotStyleFamily                 = PlotStyleFamily::Undefined;
        title                       = "";
        plotStyle                       = "lines";
        options                     = "";
        dataFilename                = "";
        numberPrecision             = -1;
        columnSeparatorTxt          = "\t";
        columnSeparatorDat          = "\t";
        binaryDataOutput            = true;
        autoGenerateDataFilename    = true;

        return *this;
    }

    const std::string& DataView::getTitle() const
    {
        return title;
    }

    DataView& DataView::setTitle(const std::string& newTitle)
    {
        title = newTitle;
        return *this;
    }

    const std::string& DataView::getPlotStyle() const
    {
        return plotStyle;
    }

    DataView& DataView::setPlotStyle(const std::string& newPlotStyle)
    {
        plotStyleID     = PlotStyle::Custom;
        plotStyleFamily = PlotStyleFamily::Custom;
        plotStyle       = newPlotStyle;
        return *this;
    }

    PlotStyleFamily DataView::getPlotStyleFamily() const
    {
        return plotStyleFamily;
    }

    DataView& DataView::setPlotStyleFamily(PlotStyleFamily newStyleFamily)
    {
        if (plotStyleID == PlotStyle::Custom)
        {
            plotStyleFamily = newStyleFamily;
        }
        else
        {
            throw UnsupportedOperationError("Cannot override style family for non-custom plot style.");
        }

        return *this;
    }

    const PlotStyle DataView::getPlotStyleID() const
    {
        return plotStyleID;
    }

    DataView& DataView::setPlotStyleID(const PlotStyle newStyle)
    {
        plotStyleID     = newStyle;
        plotStyleFamily = ::Plotypus::getPlotStyleFamily(newStyle);
        plotStyle       = getPlotStyleName(newStyle);
        return *this;
    }

    const std::string& DataView::getOptions() const
    {
        return options;
    }

    DataView& DataView::setOptions(const std::string& newOptions)
    {
        options = newOptions;
        return *this;
    }

    const std::string& DataView::getDataFilename() const
    {
        return dataFilename;
    }

    DataView& DataView::setDataFilename(const std::string& newDataFilename)
    {
        throwIfInvalidFilename("data output filename", newDataFilename);
        dataFilename = newDataFilename;
        return *this;
    }

    bool DataView::getAutoGenerateDataFilename() const
    {
        return autoGenerateDataFilename;
    }

    DataView& DataView::setAutoGenerateDataFilename(bool newAutoGenerateDataFilename)
    {
        autoGenerateDataFilename = newAutoGenerateDataFilename;
        return *this;
    }

    int DataView::getNumberPrecision() const
    {
        return numberPrecision;
    }

    DataView& DataView::setNumberPrecision(int newNumberPrecision)
    {
        numberPrecision = newNumberPrecision;
        return *this;
    }

    const std::string& DataView::getColumnSeparatorTxt() const
    {
        return columnSeparatorTxt;
    }

    DataView& DataView::setColumnSeparatorTxt(const std::string& newSeparatorTXT)
    {
        columnSeparatorTxt = newSeparatorTXT;
        return *this;
    }

    const std::string& DataView::getColumnSeparatorDat() const
    {
        return columnSeparatorDat;
    }

    DataView& DataView::setColumnSeparatorDat(const std::string& newSeparatorDAT)
    {
        columnSeparatorDat = newSeparatorDAT;
        return *this;
    }

    bool DataView::getBinaryDataOutput() const
    {
        return binaryDataOutput;
    }

    DataView& DataView::setBinaryDataOutput(bool newBinaryDataOutput)
    {
        binaryDataOutput = newBinaryDataOutput;
        return *this;
    }
}
